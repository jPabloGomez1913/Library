// <auto-generated />
using System;
using LibraryProyect.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryProyect.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20230531030504_addedCantidadLibros")]
    partial class addedCantidadLibros
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryProyect.DAL.Entities.Book", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AutorLibro")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("CantidadLibros")
                        .HasColumnType("int");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NombreLibro")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryProyect.DAL.Entities.Loan", b =>
                {
                    b.Property<Guid>("IdPrestamo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("fehcaLimite")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fehcaPrestamo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("idLibro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idPersona")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPrestamo");

                    b.HasIndex("idLibro");

                    b.HasIndex("idPersona");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("LibraryProyect.DAL.Entities.Person", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("id");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LibraryProyect.DAL.Entities.Employee", b =>
                {
                    b.HasBaseType("LibraryProyect.DAL.Entities.Person");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasIndex("EmployeeCode")
                        .IsUnique()
                        .HasFilter("[EmployeeCode] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("LibraryProyect.DAL.Entities.Student", b =>
                {
                    b.HasBaseType("LibraryProyect.DAL.Entities.Person");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasIndex("StudentCode")
                        .IsUnique()
                        .HasFilter("[StudentCode] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("LibraryProyect.DAL.Entities.Teacher", b =>
                {
                    b.HasBaseType("LibraryProyect.DAL.Entities.Person");

                    b.Property<string>("TeacherCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasIndex("TeacherCode")
                        .IsUnique()
                        .HasFilter("[TeacherCode] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("LibraryProyect.DAL.Entities.Loan", b =>
                {
                    b.HasOne("LibraryProyect.DAL.Entities.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("idLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryProyect.DAL.Entities.Person", "Person")
                        .WithMany("Loans")
                        .HasForeignKey("idPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LibraryProyect.DAL.Entities.Book", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LibraryProyect.DAL.Entities.Person", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
